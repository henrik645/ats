local settingsFilePath = "apis/networkSettings"
os.loadAPI("apis/logging")
os.loadAPI("apis/validate")
os.loadAPI("apis/settings")

function initialise()
   -- place things here needing to be run before using this API
end

function sendMessage(modem, recipient, port, replyPort, data, timeoutPerTry, numberOfTries) -- sends a message on the network
    local messageSent = false
    if not validate.tableHasKeys(modem, {"transmit"}) or not validate.areNumbers({port, replyPort, timeoutPerTry, numberOfTries}) then
        logging.errorMsg("networking: sendMessage: incorrect parameters")
    end
    
    for i = 1, numberOfTries do
        modem.transmit(port, replyPort, {
            recipient = recipient,
            from = settings.accessSetting(settingsFilePath, "nodeName"),
            port = port,
            replyPort = replyPort,
            data = data
        }
        )
        if waitForAck(modem, port, timeoutPerTry) then -- ack received
            logging.infoMsg("networking: sendMessage: ack received", 0)
            messageSent = true
            break
        else
            logging.warningMsg("networking: sendMessage: ack not received, sending again", 0)
        end
    end
    if not messageSent then
        logging.warningMsg("networking: sendMessage: unable to send message", 2)
    end
end

function receiveMessage(modem, port, timeout) -- takes care of receiving a message, returns false if no data received during timeout
    if not validate.tableHasKeys(modem, {"open", "close"}) or not validate.isNumber(port) then
        logging.errorMsg("networking: receiveMessage: incorrect parameters")
    end
    
    local timer = os.startTimer(timeout)
    modem.open(port)
    while true do
        local event, _, _, _, message, _ = os.pullEvent()
        logging.infoMsg("networking: receiveMessage: event is " .. event, 0)
        
        if event == "timer" then
            return false
        elseif event == "modem_message" then
            data = handleMessage(message)
            if not data == false then
                logging.infoMsg("networking: receiveMessage: data is " .. data, 0)
                os.cancelTimer(timer) -- makes sure the timer isn't running in the background
                logging.infoMsg("networking: receiveMessage: data is " .. data, 0)
                modem.transmit(message.replyPort, port, {
                    recipient = message.from,
                    port = message.replyPort,
                    replyPort = port,
                    from = settings.accessSetting(settingsFilePath, "nodeName"),
                    action = "ack"
                }) -- sends an ack to confirm successful sending of message
                logging.infoMsg("networking: receiveMessage: ack sent", 0)
                return data
            end
        end
    end
    modem.close(port)
end

function handleMessage(message) -- handles a message if you want to catch it yourself
    if not validate.tableHasKeys(message, {"recipient", "port", "from", "replyPort", "data"}) then -- tables don't contain the right things
        logging.errorMsg("networking: handleMessage: message or settings not formatted correctly")
    end
    
    if message.recipient == settings.accessSetting(settingsFilePath, "nodeName") then
        logging.infoMsg("networking: handleMessage: Returning message data... is " .. message.data, 0)
        return message.data
    else
        return false
    end
end

function waitForAck(modem, port, timeout) -- waits for acknowledgement on sent message being received, returns false if timeout exceeded
    local timer = os.startTimer(timeout)
    modem.open(port)
    while true do
        local event, _, _, _, message, _ = os.pullEvent()
        if event == "timer" then
            return false
        elseif event == "modem_message" then
            if validate.tableHasKey(message, "action") and message.action == "ack" then -- if it's an ack and not a simple data message
                os.cancelTimer(timer)
                return true
            end
        end
    end
end