local settingsFilePath = "apis/networkSettings"
local waitingOnAck = {} -- recipients we expect an acknowledgement of sent message being received from
os.loadAPI("apis/logging")
os.loadAPI("apis/validate")

function initialise() -- initialises the settings file
    if fs.exists(settingsFilePath) then
        settingsFile = fs.open(settingsFilePath, "r")
        settings = textutils.unserialize(settingsFile.readAll()) -- takes care of the serialized settings file
        settingsFile.close()
    else
        logging.errorMsg("networking: could not find settings file")
    end
end

function sendMessage(modem, recipient, port, replyPort, data, timeoutPerTry, numberOfTries) -- sends a message on the network
    local messageSent = false
    if not validate.tableHasKeys(modem, {"transmit"}) or not validate.areNumbers({port, replyPort, timeoutPerTry, numberOfTries}) then
        logging.errorMsg("networking: sendMessage: incorrect parameters")
    end
    
    for i = 1, numberOfTries do
        modem.transmit(port, replyPort, {
            recipient = recipient,
            port = port,
            replyPort = replyPort,
            data = data
        }
        )
        if waitForAck(modem, port, timeoutPerTry) then -- ack received
            logging.infoMsg("networking: sendMessage: ack received")
            messageSent = true
            break
        else
            logging.warningMsg("networking: sendMessage: ack not received, sending again")
        end
    end
    if not messageSent then
        logging.warningMsg("networking: sendMessage: unable to send message")
    end
end

function receiveMessage(modem, port, timeout) -- takes care of receiving a message, returns false if no data received during timeout
    if not validate.tableHasKeys(modem, {"open", "close"}) or not validate.areNumbers({port, replyPort}) then
        logging.errorMsg("networking: receiveMessage: incorrect parameters")
    end
    
    local timer = os.startTimer(timeout)
    modem.open(port)
    while true do
        local event, _, _, _, message, _ = os.pullEvent()
        logging.infoMsg("networking: receiveMessage: event is " .. event)
        
        if event == "timer" then
            return false
        elseif event == "modem_message" then
            data = handleMessage(message)
            logging.infoMsg("networking: receiveMessage: data is " .. data)
            if not data == false then
                os.cancelTimer(timer) -- makes sure the timer isn't running in the background
                logging.infoMsg("networking: receiveMessage: data is " .. data)
                return data
            end
        end
    end
    modem.close(port)
end

function handleMessage(message) -- handles a message if you want to catch it yourself
    if not validate.tableHasKeys(message, {"recipient", "port", "replyPort", "data"}) or not validate.tableHasKey(settings, "nodeName") then -- tables don't contain the right things
        logging.errorMsg("networking: handleMessage: message or settings not formatted correctly")
    end
    
    if message.recipient == settings.nodeName then
        logging.infoMsg("networking: handleMessage: Returning message data... is " .. message.data)
        return message.data
    else
        return false
    end
end

function waitForAck(modem, port, timeout) -- waits for acknowledgement on sent message being received, returns false if timeout exceeded
    local timer = os.startTimer(timeout)
    modem.open(port)
    while true do
        local event, _, _, _, message, _ = os.pullEvent()
        if event == "timer" then
            return false
        elseif event == "modem_message" then
            if validate.tableHasKey(message, "action") and message.action == "ack" then -- if it's an ack and not a simple data message
                os.cancelTimer(timer)
                return true
            end
        end
    end
end